"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['strip_directives', 'write_cells', 'export_nb']

# %% ../nbs/00_core.ipynb 2
import ast
from execnb.nbio import *
from execnb.shell import *
from fastcore.utils import *
from fastcore.script import *
from pathlib import Path

# %% ../nbs/00_core.ipynb 5
def strip_directives(text):
    # Split the text into lines and keep only lines that don't start with '#|'
    return '\n'.join(line for line in text.splitlines() if not line.strip().startswith('#|'))

def write_cells(cells, file):
    "Write `cells` to `file`."
    for cell in cells:
        if cell.cell_type=='code' and cell.source.strip():
            file.write(f'{strip_directives(cell.source)}')

@call_parse
def export_nb(file_name:str):
    "Export notebook with `file_name` to .py"
    fpath = Path(file_name)
    nb = read_nb(fpath)
    
    # grab the source from all the cells that have an `export` comment
    cells = L(cell for cell in nb.cells if re.match(r'#\s*\|export', cell.source))

    # find all the exported functions, to create `__all__`:
    trees = cells.map(NbCell.parsed_).concat()
    funcs = trees.filter(risinstance((ast.FunctionDef,ast.ClassDef))).attrgot('name')
    exp_funcs = [f for f in funcs if f[0]!='_']

    # write out the file
    dest = f'{fpath.stem}.py'
    with Path(dest).open('w',encoding="utf-8") as f:
        f.write(f"# Exported from notebook: {fpath}\n\n")
        f.write(f"__all__ = {exp_funcs}\n\n")
        write_cells(cells, f)
        f.write('\n')
    print(f"Successfully exported {file_name} to {dest}.")
